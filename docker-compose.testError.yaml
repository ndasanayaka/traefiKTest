
services:

  traefik:
      image: traefik:v2.7
      command:
      - --log=true
      - --log.level=DEBUG
      - --api.dashboard=true
      - --entrypoints.http.address=:80
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      ports:
      - 127.0.0.1:80:80
      volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      restart: always
      labels:
        traefik.enable: "true"
        traefik.http.routers.traefik.entrypoints: http
        traefik.http.routers.traefik.service: api@internal
        traefik.http.routers.traefik.rule: HostRegexp(`traefik.127.0.0.1.nip.io`)
        traefik.http.routers.traefik.middlewares: catch-all

  nginx-catch-all:
    image: nginx:stable
    volumes:
      - ./pitschi/pages:/usr/share/nginx/html:ro
      - ./pitschi/default.conf:/etc/nginx/conf.d/default.conf:ro
    
    labels:
      traefik.enable: "true"
      traefik.http.routers.catch-all.service: "catch-all@docker"
      traefik.http.routers.catch-all.rule: "PathPrefix(`/`)"
      
      # The priority must be lower than all other services
      traefik.http.routers.catch-all.priority: 1
      traefik.http.routers.catch-all.entrypoints: "https"
      traefik.http.routers.catch-all.middlewares: "catch-all"
      
      traefik.http.services.catch-all.loadbalancer.server.port: 80

      traefik.http.middlewares.catch-all.replacepath.path: "/"

      # This middleware can be applied to other services to return custom error pages, instead of the default/generic pages
      traefik.http.middlewares.error-pages.errors.status: "405,406,408,410,429,451,500-599"
      traefik.http.middlewares.error-pages.errors.service: "catch-all"
      traefik.http.middlewares.error-pages.errors.query: "/{status}.html"

  www:
      image: nginx:stable
      volumes:
      - ./www/pages:/usr/share/nginx/html
      - ./www/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/localtime:/etc/localtime:ro
      labels:
        traefik.enable: "true"
        traefik.http.services.www.loadbalancer.server.port: 80
        traefik.http.routers.www.entrypoints: http
        traefik.http.routers.www.rule: HostRegexp(`www.127.0.0.1.nip.io`) && ( HeadersRegexp(`Cookie`, `motd-read=true`) || PathPrefix(`/api/`) )
        traefik.http.routers.www.priority: 100
        